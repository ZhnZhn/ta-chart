{"version":3,"sources":["../../src/components/config.js"],"names":["_rand","Math","random","_randDirection","_randDelta","_crHigh","open","close","_crLow","NUM_POINTS","_crData","DAY_PERIOD","_now","Date","data","closePrev","i","push","date","getTime","high","low","reverse","C","INITIAL_PROVIDER_TITLE","INITIAL_ITEM_TITLE","PROXY","RATE_LIMIT","DF_DATA","DF_TIMEFRAME","Object","freeze"],"mappings":";;;;AACA,IAAMA,KAAK,GAAGC,IAAI,CAACC,MAAnB;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMH,KAAK,KAAK,GAAV,GAAgB,CAAhB,GAAoB,CAAC,CAA3B;AAAA,CAAvB;;AACA,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAMJ,KAAK,KAAGG,cAAc,EAA5B;AAAA,CAAnB;;AAEA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAiBD,IAAI,GAAGC,KAAP,GAC7BD,IAAI,GAAG,GADsB,GAE7BC,KAAK,GAAG,GAFI;AAAA,CAAhB;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACF,IAAD,EAAOC,KAAP;AAAA,SAAiBD,IAAI,GAAGC,KAAP,GAC5BA,KAAK,GAAG,GADoB,GAE5BD,IAAI,GAAG,GAFI;AAAA,CAAf;;AAIA,IAAMG,UAAU,GAAG,GAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,MAAMC,UAAU,GAAG,OAAK,EAAL,GAAQ,EAAR,GAAW,EAA9B;AAAA,MACEC,IAAI,GAAG,IAAIC,IAAJ,EADT;AAAA,MAEEC,IAAI,GAAG,EAFT;;AAGA,MAAIC,SAAS,GAAG,CAAhB;AAAA,MACER,KADF;AAAA,MACUD,IADV;;AAEA,OAAK,IAAIU,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACP,UAAhB,EAA4BO,CAAC,EAA7B,EAAiC;AAC/BV,IAAAA,IAAI,GAAGS,SAAS,GAAGX,UAAU,EAA7B;AACAG,IAAAA,KAAK,GAAGQ,SAAS,GAAGX,UAAU,EAA9B;AACAU,IAAAA,IAAI,CAACG,IAAL,CAAU;AACRC,MAAAA,IAAI,EAAEN,IAAI,CAACO,OAAL,KAAeH,CAAC,GAACL,UADf;AAERL,MAAAA,IAAI,EAAJA,IAFQ;AAEFC,MAAAA,KAAK,EAALA,KAFE;AAGRa,MAAAA,IAAI,EAAEf,OAAO,CAACC,IAAD,EAAOC,KAAP,CAHL;AAIRc,MAAAA,GAAG,EAAEb,MAAM,CAACF,IAAD,EAAOC,KAAP;AAJH,KAAV;AAMD;;AACD,SAAOO,IAAI,CAACQ,OAAL,EAAP;AACD,CAjBD;;AAmBA,IAAMC,CAAC,GAAI;AACTC,EAAAA,sBAAsB,EAAE,wBADf;AAETC,EAAAA,kBAAkB,EAAE,MAFX;AAGTC,EAAAA,KAAK,EAAE,sCAHE;AAITC,EAAAA,UAAU,EAAE,IAJH;AAMTC,EAAAA,OAAO,EAAElB,OAAO,EANP;AAOTmB,EAAAA,YAAY,EAAE;AAPL,CAAX;;eAUeC,MAAM,CAACC,MAAP,CAAcR,CAAd,C","sourcesContent":["\r\nconst _rand = Math.random;\r\nconst _randDirection = () => _rand() > 0.5 ? 1 : -1;\r\nconst _randDelta = () => _rand()*_randDirection();\r\n\r\nconst _crHigh = (open, close) => open > close\r\n  ? open + 0.2\r\n  : close + 0.2;\r\nconst _crLow = (open, close) => open > close\r\n  ? close - 0.2\r\n  : open - 0.2;\r\n\r\nconst NUM_POINTS = 100;\r\n\r\nconst _crData = () => {\r\n  const DAY_PERIOD = 1000*60*60*24\r\n  , _now = new Date()\r\n  , data = [];\r\n  let closePrev = 1\r\n  , close , open;\r\n  for (let i=0; i<NUM_POINTS; i++) {\r\n    open = closePrev + _randDelta()\r\n    close = closePrev + _randDelta()\r\n    data.push({\r\n      date: _now.getTime()-i*DAY_PERIOD,\r\n      open, close,\r\n      high: _crHigh(open, close),\r\n      low: _crLow(open, close)\r\n    })\r\n  }\r\n  return data.reverse();\r\n}\r\n\r\nconst C  = {\r\n  INITIAL_PROVIDER_TITLE: 'Data Provider (Random)',\r\n  INITIAL_ITEM_TITLE: 'Item',\r\n  PROXY: 'https://cors-anywhere.herokuapp.com/',\r\n  RATE_LIMIT: 3000,\r\n\r\n  DF_DATA: _crData(),\r\n  DF_TIMEFRAME: '1d'\r\n};\r\n\r\nexport default Object.freeze(C)\r\n"],"file":"config.js"}