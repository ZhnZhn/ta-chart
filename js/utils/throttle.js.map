{"version":3,"sources":["../../src/utils/throttle.js"],"names":["_fnNow","Date","now","getTime","throttle","func","wait","options","timeout","context","args","result","previous","later","leading","apply","throttled","remaining","inArgs","clearTimeout","trailing","setTimeout","cancel"],"mappings":";;;;;AAAA;;;AAGA,IAAMA,SAASC,KAAKC,GAAL,IAAY,YAAW;AACpC,SAAO,IAAID,IAAJ,GAAWE,OAAX,EAAP;AACD,CAFD;;AAIA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,WAAW,SAAXA,QAAW,CAASC,IAAT,EAAeC,IAAf,EAAiC;AAAA,MAAZC,OAAY,uEAAJ,EAAI;;AAChD;AACA,MAAIC,gBAAJ;AAAA,MAAaC,gBAAb;AAAA,MAAsBC,aAAtB;AAAA,MAA4BC,eAA5B;AACA;AACA,MAAIC,WAAW,CAAf;AACA;;AAEA;AACA,MAAMC,QAAQ,SAARA,KAAQ,GAAW;AACvBD,eAAWL,QAAQO,OAAR,KAAoB,KAApB,GACN,CADM,GACFd,QADT;AAEAQ,cAAU,IAAV;AACAG,aAASN,KAAKU,KAAL,CAAWN,OAAX,EAAoBC,IAApB,CAAT;AACA,QAAI,CAACF,OAAL,EAAcC,UAAUC,OAAO,IAAjB;AACf,GAND;;AAQA;AACA,MAAMM,YAAY,SAAZA,SAAY,GAAoB;AACpC;AACA,QAAMd,MAAMF,QAAZ;AACA,QAAI,CAACY,QAAD,IAAaL,QAAQO,OAAR,KAAoB,KAArC,EAA4CF,WAAWV,GAAX;AAC5C;AACA,QAAMe,YAAYX,QAAQJ,MAAMU,QAAd,CAAlB;AACAH,cAAU,IAAV;AACA;;AAPoC,sCAARS,MAAQ;AAARA,YAAQ;AAAA;;AAQpCR,WAAOQ,MAAP;AACA,QAAID,aAAa,CAAb,IAAkBA,YAAYX,IAAlC,EAAwC;AACtC,UAAIE,OAAJ,EAAa;AACXW,qBAAaX,OAAb;AACAA,kBAAU,IAAV;AACD;AACDI,iBAAWV,GAAX;AACAS,eAASN,KAAKU,KAAL,CAAWN,OAAX,EAAoBC,IAApB,CAAT;AACA,UAAI,CAACF,OAAL,EAAcC,UAAUC,OAAO,IAAjB;AACf,KARD,MAQO,IAAI,CAACF,OAAD,IAAYD,QAAQa,QAAR,KAAqB,KAArC,EAA4C;AACjDZ,gBAAUa,WAAWR,KAAX,EAAkBI,SAAlB,CAAV;AACD;AACD,WAAON,MAAP;AACD,GArBD;;AAuBAK,YAAUM,MAAV,GAAmB,YAAW;AAC5BH,iBAAaX,OAAb;AACAI,eAAW,CAAX;AACAJ,cAAUC,UAAUC,OAAO,IAA3B;AACD,GAJD;;AAMA,SAAOM,SAAP;AACD,CA/CD;;kBAiDeZ,Q","file":"throttle.js","sourcesContent":["//undescore.js throttle\r\n\r\n\r\nconst _fnNow = Date.now || function() {\r\n  return new Date().getTime();\r\n};\r\n\r\n// Returns a function, that, when invoked, will only be triggered at most once\r\n// during a given window of time. Normally, the throttled function will run\r\n// as much as it can, without ever going more than once per `wait` duration;\r\n// but if you'd like to disable the execution on the leading edge, pass\r\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\r\n\r\nconst throttle = function(func, wait, options={}) {\r\n  //var timeout, context, args, result;\r\n  let timeout, context, args, result;\r\n  //var previous = 0;\r\n  let previous = 0;\r\n  //if (!options) options = {};\r\n\r\n  //var later = function() {\r\n  const later = function() {\r\n    previous = options.leading === false\r\n       ? 0 : _fnNow();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n    if (!timeout) context = args = null;\r\n  };\r\n\r\n  //var throttled = function() {\r\n  const throttled = function(...inArgs) {\r\n    //var now = _fnNow();\r\n    const now = _fnNow();\r\n    if (!previous && options.leading === false) previous = now;\r\n    //var remaining = wait - (now - previous);\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    //args = arguments;\r\n    args = inArgs;\r\n    if (remaining <= 0 || remaining > wait) {\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n      }\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  throttled.cancel = function() {\r\n    clearTimeout(timeout);\r\n    previous = 0;\r\n    timeout = context = args = null;\r\n  };\r\n\r\n  return throttled;\r\n};\r\n\r\nexport default throttle\r\n"]}